name: Django CICD pipeline

on:
    push:
      branches:
        - main
    pull_request:
      branches:
        - main

env:
  GITHUB_WORKFLOW: true
  DJANGO_SECRET_KEY: ${{ secrets.SECRET_KEY }}
  DJANGO_DEBUG: true
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres_user
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: github_actions
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: 3.11.3

    - name: Install dependencies
      run: |
        python3 -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install coverage
        pip install flake8
        pip install bandit

    - name: Unit Tests
      run: coverage run manage.py test

    - name: Coverage Check
      run: coverage report --fail-under=80

    - name: Coverage Report
      run: coverage html --directory=reports/htmlcov/

    - name: Create coverage report artifact
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: ./reports/htmlcov/

    - name: Flake8
      run: flake8 .

    - name: Bandit
      run: bandit -c pyproject.toml -r accounts/ age_timelines/ timelines/ tplot_site/ -f html -o reports/bandit.html

    - name: Create bandit report artifact
      uses: actions/upload-artifact@v3
      with:
        name: bandit-report
        path: ./reports/bandit.html


  check_environment_status:
    uses: ./.github/workflows/ebs_environment_status.yaml
    with:
      environment_name: ${{ vars.EB_ENV_NAME  }}
    secrets:
      aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}


  get_version_label:
    runs-on: ubuntu-latest
    outputs:
      version_label: ${{ steps.get_version_label.outputs.version_label }}
    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Get version label
      id: get_version_label
      run: |
        version_label="github_action_$(grep -o '[0-9]*\.[0-9]*\.[0-9]*' pyproject.toml | tr . _)"
        echo "version_label=$version_label" >> $GITHUB_OUTPUT

    - name: Display release label
      run: echo "${{ steps.get_version_label.outputs.version_label }}"


  deploy:
    needs: [test, check_environment_status, get_version_label]
    if: ${{ needs.check_environment_status.outputs.status == 'created' }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout source code
      uses: actions/checkout@v2

    - name: Generate deployment package
      run: zip -r deploy.zip . -x '*.git*'

    - name: Deploy to EB
      uses: einaregilsson/beanstalk-deploy@v21
      continue-on-error: true
      with:
        aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        application_name: tplot
        environment_name: "${{ vars.EB_ENV_NAME }}"
        version_label: ${{ needs.get_version_label.outputs.version_label }}
        use_existing_version_if_available: true
        region: eu-west-2
        deployment_package: deploy.zip
