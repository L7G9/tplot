name: Elastic Beanstalk environment

on:
  workflow_dispatch:
    inputs:
      workflow_action:
        type: choice
        description: Create or terminate Elastic Beanstalk Evironment
        required: true
        options:
        - create
        - terminate
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
  EB_DB_USER: ${{ secrets.EB_DB_USER }}
  EB_DB_PASSWORD: ${{ secrets.EB_DB_PASSWORD }}

jobs:
  environment_status:
    uses: ./.github/workflows/ebs_environment_status.yaml
    with:
      environment_name: ${{ vars.EB_ENV_NAME  }}
    secrets:
      aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}


  create_environment:
    runs-on: ubuntu-latest
    needs: environment_status
    if: ${{ github.event.inputs.workflow_action == 'create' && needs.environment_status.outputs.status == 'not_created' }}

    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: 3.9

    - name: Install AWS Elastic Beanstalk CLI
      run: |
        python --version
        pip --version
        pip install awsebcli --upgrade --user

    - name: Create environment
      run: |
        eb create "${{ vars.EB_ENV_NAME }}" \
        --database.engine "postgres" \
        --database.instance "db.t4g.micro" \
        --database.username $EB_DB_USER \
        --database.password $EB_DB_PASSWORD \
        --database.size 5 \
        --elb-type "application" \
        --instance_type "t2.micro" \
        --min-instances 1 \
        --max-instances 2


  setup_https:
    runs-on: ubuntu-latest
    needs: create_environment

    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: 3.9

    - name: Install AWS Boto3 SDK
      run: |
        pip install boto3

    - name: Run HTTPS setup script
      run: |
        python3 python_scripts/awseb_https.py -e "${{ vars.EB_ENV_NAME }}" -d "${{ vars.DOMAIN_NAME }}" -s "${{ vars.SUBDOMAIN_NAME }}"


  delete_alias:
    runs-on: ubuntu-latest
    needs: environment_status
    if: ${{ github.event.inputs.workflow_action == 'terminate' && needs.environment_status.outputs.status == 'created' }}

    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: 3.9

    - name: Install AWS Boto3 SDK
      run: |
        pip install boto3

    - name: Run HTTPS setup script
      run: |
        python3 python_scripts/delete_alias.py -e "${{ vars.EB_ENV_NAME }}" -d "${{ vars.DOMAIN_NAME }}" -s "${{ vars.SUBDOMAIN_NAME }}"


  terminate_environment:
    runs-on: ubuntu-latest
    needs: delete_alias

    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: 3.9

    - name: Install AWS Elastic Beanstalk CLI
      run: |
        python --version
        pip --version
        pip install awsebcli --upgrade --user

    - name: Terimnate environment
      run: eb terminate "${{ vars.EB_ENV_NAME }}" --force


  delete_certificate:
    runs-on: ubuntu-latest
    needs: terminate_environment

    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: 3.9

    - name: Install AWS Boto3 SDK
      run: |
        pip install boto3

    - name: Run HTTPS setup script
      run: |
        python3 python_scripts/delete_certificate.py -d "${{ vars.DOMAIN_NAME }}"


  error_getting_environment_status:
    runs-on: ubuntu-latest
    needs: environment_status
    if: ${{ needs.environment_status.outputs.status == 'error' }}

    steps:
    - run: exit 1
